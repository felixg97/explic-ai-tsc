"""
classifier.py

Arbitrary Classifer proposed by Mustermann et al. 1999

bibtex:

This Script has been provided by:
https://url.com

It is partially rewritten.
"""
import tensorflow.keras as keras
import tensorflow as tf
import numpy as np
import time

from utils.utils import calculate_metrics, save_logs
from utils.utils import save_test_duration

class Classifer(object):
    
    def __init__(self, output_directory, input_shape, nb_classes, verbose=False, build=True):
        self.output_directory = output_directory

        ## build routine
        if build == True:
            self.model = self.build(input_shape, nb_classes)

            if verbose:
                self.model.summary()
            self.verbose = self.verbose

            if load_weights:
                self.model.load_weights(f'{self.output_directory}model_init.hdf5')
            else:
                self.model.save_weights('{self.output_directory}model_init.hdf5')


    def build(self, input_shape, nb_classes):
        ## model layers

        """
        Deep Learning
        """
        ## input layer

        ## block 1

        ## block ...

        ## gap layer

        ## output layer

        ## model
        model = None

        ## file path to save model
        file_path = f'{self.output_directory}best_model.hdf5'

        ## model checkpoint (to save model)
        model_checkpoint = keras.callbacks.ModelCheckpoint(filepath=file_path, monitor='loss', 
			save_best_only=True)
        
        return model


    def fit(self, x_train, y_train, x_test, y_test, y_true):
        ## check if tensorflow-gpu is ready and up (for training)
        # (skipping for yet)

        ## batch_size/minibatch_site

        ## nb_epochs

        ## measure training time
        start_time = time.time()

        ## fit model to training data (keras History object)
        hist = None

        ## end of training time
        duration = time.time() - start_time

        ## save model as last_model as .hdf5
        self.model.save(f'{self.output_directory}last_model.hdf5')

        ## predict test data
        y_pred = self.predict(x_train, y_train, x_test, x_test, y_true, return_df_metrics=False)

        ## save predictions as .npy (fast read in comp. to csv)
        np.save(f'{self.output_directory}y_pred.npy', y_pred)

        ## addtionally save predictions as .csv (if true)
        if False:
            np.savetxt(f'{self.output_directory}y_pred.csv', y_pred, delimiter=',')

        ## convert predictions from binary to integer
        y_pred = np.argmax(y_pred, axis=1)

        ## calulate metrics
        df_metrics = save_logs(self.output_directory, hist, y_pred, y_true, duration)

        ## clear keras session
        keras.backend.clear_session()

        ##
        return df_metrics


    
    def predict(self, x_train, y_train, x_test, y_test, y_true, return_df_metrics=True):
        ## measure prediction time
        start_time = time.time()

        ## model path to load model
        model_path = f'{self.output_directory}+best_model.hdf5'

        ## load model
        model = keras.models.load_model(model_path)

        ## predict test data
        y_pred = model.predict(x_test)

        if return_df_metrics:
            ## converts predictions from binary to integer
            y_pred = np.argmax(y_pred, axis=1) 

            ## calculate metrics
            df_metrics = calculate_metrics(y_true, y_pred, time.time(), 0.0)
        else:
            duration = time.time() - start_time
            save_test_duration(f'{self.output_directory}', duration)
            return y_pred